/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react'
import { useGLTF, useAnimations, useFBX } from '@react-three/drei'

export function Model({ currentAnimationName, ...props }) {
  const { nodes, materials } = useGLTF('models/user3_openmount.glb')
  
  const {animations : idleAnimations} = useFBX('animations/Idle.fbx');
  const {animations : waveAnimation} = useFBX('animations/Waving.fbx');
  const {animations : thankAnimation} = useFBX('animations/Thankful.fbx');
  const {animations : drinkAnimation} = useFBX('animations/Drinking.fbx');
  const {animations : cryAnimation} = useFBX('animations/Crying.fbx');
  const {animations : noAnimation} = useFBX('animations/No.fbx');
  const {animations : callAnimation} = useFBX('animations/Talking On Phone.fbx');
  const {animations : strongAnimation} = useFBX('animations/Strong Gesture.fbx');
  const {animations : timeAnimation} = useFBX('animations/time.fbx');
  const {animations : lookAnimation} = useFBX('animations/Looking.fbx');
  const {animations : youAnimation} = useFBX('animations/You.fbx');
  const {animations : writingAnimation} = useFBX('animations/Writing.fbx');
  const {animations : talkingAnimation} = useFBX('animations/Talking.fbx');

  idleAnimations[0].name = "មិនកាយវិការ"; //'Not Kayvika';
  waveAnimation[0].name = "សួរស្តី"; //'Hello';
  thankAnimation[0].name = "អរគុណ"; //'Thank';
  drinkAnimation[0].name = "ផឹក"; //'Drink';
  cryAnimation[0].name =  "យំ" ;//'Cry';
  noAnimation[0].name =   "ទេ"; //'No';
  callAnimation[0].name =  "តេទូរសព្ទ័"; //'Call';
  strongAnimation[0].name = "ខ្លាំង"; //'Strong';
  timeAnimation[0].name = 'មើលម៉ោង'; // 'Time'
  lookAnimation[0].name = "រកមើល"; //'Looking';
  youAnimation[0].name = "អ្នក"; //'You';
  writingAnimation[0].name = "សរសេរ"; //'Writing';
  talkingAnimation[0].name = "ជជែក"; //'Talking';

//   const [animation, setAnimation] = useState("Idle");
  const group =  useRef();
  const { actions } = useAnimations([idleAnimations[0], waveAnimation[0], thankAnimation[0], drinkAnimation[0], cryAnimation[0], noAnimation[0], callAnimation[0], strongAnimation[0], timeAnimation[0], lookAnimation[0], youAnimation[0], writingAnimation[0], talkingAnimation[0]], group);

  useEffect(() => {
    if (actions && actions[currentAnimationName]) {
      // Play the current animation
      actions[currentAnimationName].reset().fadeIn(0.5).play();

      // Cleanup: Fade out the animation when component unmounts or animation changes
      return () => {
        if (actions[currentAnimationName]) {  // Check if action is still defined
          actions[currentAnimationName].fadeOut(0.5);
        }
      };
    }
  }, [currentAnimationName, actions]);

  // useEffect(() => {
  //   // if (actions && actions[currentAnimationName]) {
  //     actions[currentAnimationName].reset().fadeIn(0.5).play();
  //     return () => actions[currentAnimationName].fadeOut(0.5);
  //   // }
  // }, [currentAnimationName, actions]);
  
  return (
    <group {...props} ref={group} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
    </group>
  )
}

useGLTF.preload('/models/user3_openmount.glb')
